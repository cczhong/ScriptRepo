#!/usr/bin/perl -w
use strict;
use Getopt::Long;

my $file;		# the file generated by ScriptRepo/JoinFilesByKey.pl
my $out;		# the output file
# the column ID contains the gi|xxxx information
my $col;
# the gi ID to taxa ID mapping file, downloaded from NCBI website
my $gi_to_taxa;		
# the taxa ID to taxa name mapping file, downloaded from NCBI website
my $taxa_to_name;

GetOptions (
  "file=s" => \$file,
  "col=i" => \$col,
  "out=s" => \$out,
  "gi2taxa=s" => \$gi_to_taxa,
  "taxa2name=s" => \$taxa_to_name
) or die("Error in command line arguments\n");

if(!defined $file || !defined $out || !defined $col || !defined $gi_to_taxa || !defined $taxa_to_name)  {
  print "MapNCBITaxonomy: mapping GI numbers to taxonomy name using NCBI format.\n";
  print "Requires NCBI taxonomy databases. FTP address: ftp://ftp.ncbi.nih.gov/pub/taxonomy/\n";
  print "Usage: perl MapNCBITaxonomy.pl --file=[FILE] --col=[COLUMN_ID] --gi2taxa=[GI_TO_TAXA_FILE] --taxa2name=[TAXA_TO_NAME_FILE] --out[OUTPUT]\n";
  print "	--file:		the file contains information regarding the GI number\n";
  print "	--col:		the column ID that contains the GI information (like gi|xxxx) in the file, 0-based\n";
  print "	--gi2taxa:	the NCBI gi-taxa file, for nucl use gi_taxid_nucl.dmp, for prot use gi_taxid_prot.dmp\n";
  print "	--taxa2name:	the NCBI taxa-name file, expecting names.dmp\n";
  print "	--out:		the output file\n";
  exit;
}

open my $OUT, ">$out" or die "Cannot create file for output: $!\n";

print "NOTE: using GI_ID<->TAXA_ID mapping file $gi_to_taxa\n";
print "NOTE: using TAXA_ID<->TAXA_NAME mapping file $taxa_to_name\n";
print "NOTE: using $col as the column ID that contains the gi number (with format like gi|xxxx|ref|xxxx)\n";

my @info_array;
my %info_hash;
my %taxa_hash;
my %name_hash;
open my $FIN, "<$file" or die "Cannot open file: $!\n";
while(<$FIN>)  {
  chomp;
  my $line = $_;
  my @decom = split /\s+/, $_;
  my @decom2 = split  /\|/, $decom[$col];
  my @info = ($decom2[1], $line);
  push @info_array, \@info;
  $info_hash{$decom2[1]} = 1;
}
close $FIN;

open my $TIN, "<$gi_to_taxa" or die "Cannot open file: $!\n";
while(<$TIN>)  {
  chomp;
  my @decom = split /\s+/, $_;
  if(exists $info_hash{$decom[0]})  {
    $taxa_hash{$decom[0]} = $decom[1];
    $name_hash{$decom[1]} = 1;
  }
}
close $TIN;

open my $NIN, "<$taxa_to_name" or die "Cannot open file: $!\n";
while(<$NIN>)  {
  chomp;
  my @decom = split /\s*\|\s*/, $_;
  #print "!$decom[0]	!$decom[1]	!$decom[2]	!$decom[3]\n";
  $name_hash{$decom[0]} = $decom[1] if (exists $name_hash{$decom[0]} && $decom[3] eq 'scientific name');
}
close $NIN;

for(my $i = 0; $i < scalar @info_array; ++ $i)  {
  if(exists $taxa_hash{$info_array[$i][0]} && exists $name_hash{$taxa_hash{$info_array[$i][0]}})  {
    print $OUT "$name_hash{$taxa_hash{$info_array[$i][0]}}	$info_array[$i][1]\n";
  }  else {
    print $OUT "unmapped_taxa	$info_array[$i][0]\n";
  }
}
close $OUT;
